{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Kong with Cassandra cluster demo CloudFormation template file.",
  "Parameters": {
    "KongKeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances for Kong",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": ""
    },
    "CassandraKeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances for Cassandra, required if Cassandra instance to be created",
      "Type": "String",
      "Default": ""
    },
    "CassandraSecurityGroupName": {
      "Description": "Name of an existing SecurityGroup for Cassandra, required if Cassandra instance to be created",
      "Type": "CommaDelimitedList"
    },
    "KongSecurityGroupName": {
      "Description": "Name of an existing SecurityGroup for Kong",
      "Type": "List<AWS::EC2::SecurityGroup::GroupName>"
    },
    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0\/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x\/x."
    },
    "AvailabilityZone": {
      "Description": "AZ for the Cassandra instance, required if Cassandra instance to be created",
      "Type": "String"
    },
    "CassandraSeedNodesHost": {
      "Description": "comma separated DNS name of Cassandra seed nodes.",
      "Type": "CommaDelimitedList",
      "ConstraintDescription": "must be a valid host name, ex. example.com:1234, example.com, 123.123.123.123:1234 "
    },
    "FleetMaxSize": {
      "Description": "Max Number of EC2 instances to launch for the Kong proxy",
      "Type": "Number",
      "Default": "2",
      "MaxValue": "10",
      "MinValue": "1"
    },
    "FleetDesiredSize": {
      "Description": "Desired Number of EC2 instances to launch for the Kong proxy",
      "Type": "Number",
      "Default": "2",
      "MaxValue": "10",
      "MinValue": "1"
    },
    "KongInstanceType": {
      "Description": "Kong EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t1.micro",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c1.medium",
        "c1.xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "g2.2xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "cr1.8xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "CassandraInstanceType": {
      "Description": "Cassandra EC2 instance type",
      "Type": "String",
      "Default": "m3.medium",
      "AllowedValues": [
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c1.medium",
        "c1.xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "g2.2xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "cr1.8xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "ClusterName": {
      "Default": "Cassandra Cluster",
      "Description": "name of Cassandra cluster, required if Cassandra instance to be created",
      "Type": "String"
    },
    "ClusterVersion": {
      "Description": "Cassandra cluster version",
      "Type": "String",
      "Default": "Community",
      "AllowedValues": [
        "Community",
        "Enterprise"
      ],
      "ConstraintDescription": "Cassandra cluster type, required if Cassandra instance to be created"
    },
    "CassandraVersion": {
      "Description": "Cassandra version",
      "Type": "String",
      "Default": "2.2.0",
      "ConstraintDescription": "Cassandra version, required if Cassandra instance to be created"
    }
  },
  "Mappings": {
    "RegionMap": {
      "us-east-1": {
        "KONGAMI": "ami-1ecae776",
        "CASSANDRAAMI": "ami-ada2b6c4"
      },
      "us-west-1": {
        "KONGAMI": "ami-e7527ed7",
        "CASSANDRAAMI": "ami-3cf7c979"
      },
      "us-west-2": {
        "KONGAMI": "ami-d114f295",
        "CASSANDRAAMI": "ami-1cff962c"
      }
    }
  },
  "Conditions": {
    "CreateCassandraInstance": {
      "Fn::Equals": [
        {
          "Fn::Select": [
            "0",
            {
              "Ref": "CassandraSeedNodesHost"
            }
          ]
        },
        ""
      ]
    }
  },
  "Resources": {
    "KongGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": {
          "Fn::GetAZs": ""
        },
        "LaunchConfigurationName": {
          "Ref": "KongLaunchConfig"
        },
        "MinSize": "1",
        "MaxSize": {
          "Ref": "FleetMaxSize"
        },
        "DesiredCapacity": {
          "Ref": "FleetDesiredSize"
        },
        "LoadBalancerNames": [
          {
            "Ref": "ElasticLoadBalancer"
          }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": {
            "Ref": "FleetDesiredSize"
          },
          "Timeout": "PT15M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime": "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "KongLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "KONGAMI"
          ]
        },
        "InstanceType": {
          "Ref": "KongInstanceType"
        },
        "KeyName": {
          "Ref": "KongKeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "InstanceSecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!\/bin\/bash\n",
                "yum update -y aws-cfn-bootstrap\n",
                "echo '* soft nofile 65000' >> \/etc\/security\/limits.conf\n",
                "echo '* hard nofile 65000' >> \/etc\/security\/limits.conf\n",
                "wget https:\/\/github.com\/Mashape\/kong\/releases\/download\/0.4.0\/kong-0.4.0.el5.noarch.rpm\n",
                "yum install -y epel-release\n",
                "yum install -y kong-0.4.0.*.noarch.rpm --nogpgcheck\n",
                "CASSANDRA_HOSTS=(\"",
                {
                  "Fn::If": [
                    "CreateCassandraInstance",
                    {
                      "Fn::GetAtt": [
                        "CassandraSeed",
                        "PublicDnsName"
                      ]
                    },
                    {
                      "Fn::Join": [
                        "\" \"",
                        {
                          "Ref": "CassandraSeedNodesHost"
                        }
                      ]
                    }
                  ]
                },
                "\")\n",
                "echo \"      hosts:\" > hosts\n",
                "for i in \"${CASSANDRA_HOSTS[@]}\"; do echo -e \"        - $i\"  >> hosts; done;\n",
                "sed -i $'\/hosts: \"localhost\"\/{r hosts\\n d}' \/etc\/kong\/kong.yml\n",
                "sleep ",
                {
                  "Fn::If": [
                    "CreateCassandraInstance",
                    "2m",
                    "0s"
                  ]
                },
                "\n",
                "su -s \/bin\/sh -c \"\/usr\/local\/bin\/kong start\" ec2-user\n",
                "\/opt\/aws\/bin\/cfn-signal -e 0",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource KongGroup ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      }
    },
    "ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "AvailabilityZones": {
          "Fn::GetAZs": ""
        },
        "CrossZone": "true",
        "Listeners": [
          {
            "LoadBalancerPort": "8000",
            "InstancePort": "8000",
            "Protocol": "HTTP"
          },
          {
            "LoadBalancerPort": "8001",
            "InstancePort": "8001",
            "Protocol": "HTTP"
          }
        ],
        "HealthCheck": {
          "Target": "TCP:8000",
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "5",
          "Interval": "30",
          "Timeout": "5"
        }
      }
    },
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH access and HTTP access on the inbound port",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "8000",
            "ToPort": "8000",
            "SourceSecurityGroupOwnerId": {
              "Fn::GetAtt": [
                "ElasticLoadBalancer",
                "SourceSecurityGroup.OwnerAlias"
              ]
            },
            "SourceSecurityGroupName": {
              "Fn::GetAtt": [
                "ElasticLoadBalancer",
                "SourceSecurityGroup.GroupName"
              ]
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8001",
            "ToPort": "8001",
            "SourceSecurityGroupOwnerId": {
              "Fn::GetAtt": [
                "ElasticLoadBalancer",
                "SourceSecurityGroup.OwnerAlias"
              ]
            },
            "SourceSecurityGroupName": {
              "Fn::GetAtt": [
                "ElasticLoadBalancer",
                "SourceSecurityGroup.GroupName"
              ]
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          }
        ]
      }
    },
    "CassandraSeed": {
      "Type": "AWS::EC2::Instance",
      "Condition": "CreateCassandraInstance",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "CASSANDRAAMI"
          ]
        },
        "AvailabilityZone": {
          "Ref": "AvailabilityZone"
        },
        "InstanceType": {
          "Ref": "CassandraInstanceType"
        },
        "KeyName": {
          "Ref": "CassandraKeyName"
        },
        "SecurityGroups": {
          "Ref": "CassandraSecurityGroupName"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "--clustername ",
                {
                  "Ref": "ClusterName"
                },
                " --totalnodes 1 --version ",
                {
                  "Ref": "ClusterVersion"
                },
                " --release ",
                {
                  "Ref": "CassandraVersion"
                },
                "\n"
              ]
            ]
          }
        }
      }
    }
  },
  "Outputs": {
    "ProxyURL": {
      "Description": "Kong Proxy URL",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http:\/\/",
            {
              "Fn::GetAtt": [
                "ElasticLoadBalancer",
                "DNSName"
              ]
            },
            ":8000"
          ]
        ]
      }
    },
    "AdminURL": {
      "Description": "Kong Admin URL",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http:\/\/",
            {
              "Fn::GetAtt": [
                "ElasticLoadBalancer",
                "DNSName"
              ]
            },
            ":8001"
          ]
        ]
      }
    }
  }
}