{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Kong CloudFormation template.Template creates load balanced Kong instances with a Postgres RDS instance unless user provide one",
  "Parameters": {
    "DBName": {
      "Default": "kong",
      "Description" : "The database name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "8",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },
    "DBUsername": {
      "Default": "kong",
      "NoEcho": "true",
      "Description" : "The database admin account username",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },
    "DBHost": {
      "Description" : "The database host dns, leave blank to start a new RDS instance",
      "Type": "String"
    },
    "DBPort": {
      "Description" : "The database port, leave blank to start a new RDS instance",
      "Type": "String"
    },
    "DBPassword": {
      "Default": "changeit",
      "NoEcho": "true",
      "Description" : "The database admin account password",
      "Type": "String",
      "MinLength": "8"
    },
    "DBClass" : {
      "Default" : "db.m1.large",
      "Description" : "Database instance class",
      "Type" : "String",
      "AllowedValues" : [ "db.t2.micro", "db.m1.small", "db.m1.large", "db.m1.xlarge", "db.m2.xlarge" ],
      "ConstraintDescription" : "must select a valid database instance type."
    },
    "DBPublicAccess" : {
      "Type" : "String",
      "Default" : false,
      "Description" : "Database public access"
    },
    "DBAllocatedStorage" : {
      "Default": "5",
      "Description" : "The size of the database (Gb)",
      "Type": "Number",
      "MinValue": "5",
      "MaxValue": "6144",
      "ConstraintDescription" : "must be between 5+"
    },
    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the Kong EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0\/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x\/x."
    },
    "KongAvailabilityZones": {
      "Description": "AZ for the Kong instances, please choose non constrained zones only",
      "Type": "List<AWS::EC2::AvailabilityZone::Name>"
    },
    "KongProxyAccess": {
      "Description": "The IP address range that can be used to access the Kong proxy port 8000",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0\/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x\/x."
    },
    "KongAdminAccess": {
      "Description": "The IP address range that can be used to access the Kong Admin port 8001",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0\/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x\/x."
    },
    "KongKeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances for Kong",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": ""
    },
    "KongFleetMaxSize": {
      "Description": "Max Number of Kong instances",
      "Type": "Number",
      "Default": "2",
      "MinValue": "1"
    },
    "KongFleetDesiredSize": {
      "Description": "Desired Number of Kong instances",
      "Type": "Number",
      "Default": "2",
      "MinValue": "1"
    },
    "KongInstanceType": {
      "Description": "Kong EC2 instance type",
      "Type": "String",
      "Default": "c3.4xlarge",
      "AllowedValues": [
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c1.medium",
        "c1.xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "KongVersion": {
      "Description": "Kong version, leave empty to install latest version. (Only 0.6.x supported)",
      "Type": "String"
    }
  },
  "Mappings": {
    "RegionKongAmiMap": {
      "us-east-1": {
        "PV": "ami-1ccae774"
      },
      "us-west-1": {
        "PV": "ami-d514f291"
      },
      "us-west-2": {
        "PV": "ami-ff527ecf"
      },
      "eu-west-1" : {
        "PV": "ami-bf0897c8"
      },
      "ap-northeast-1" : {
         "PV": "ami-27f90e27"
      },
      "ap-southeast-1" : {
         "PV": "ami-acd9e8fe"
      },
      "ap-southeast-2" : {
         "PV": "ami-ff9cecc5"
      },
      "sa-east-1" : {
         "PV" : "ami-bb2890a6"
      }
    }
  },
 "Conditions" : {
    "CreateRDS" : {"Fn::Equals" : [{"Ref" : "DBHost"}, ""]}
  },
  "Resources": {
    "KongGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": {
          "Ref": "KongAvailabilityZones"
        },
        "LaunchConfigurationName": {
          "Ref": "KongLaunchConfig"
        },
        "MinSize": "1",
        "MaxSize": {
          "Ref": "KongFleetMaxSize"
        },
        "DesiredCapacity": {
          "Ref": "KongFleetDesiredSize"
        },
        "LoadBalancerNames": [
          {
            "Ref": "KongLoadBalancer"
          }
        ],
        "HealthCheckGracePeriod": "300",
        "Tags" : [
          { "Key" : "Name", "Value" : { "Ref" : "AWS::StackId" }, "PropagateAtLaunch" : "true" }
        ]
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime": "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "KongWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },
    "KongWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "KongGroup",
      "Properties" : {
        "Handle"  : { "Ref" : "KongWaitHandle" },
        "Timeout" : "900",
        "Count"   : { "Ref" : "KongFleetDesiredSize" }
      }
    },
    "KongLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionKongAmiMap",
            {
              "Ref": "AWS::Region"
            },
            "PV"
          ]
        },
        "InstanceType": {
          "Ref": "KongInstanceType"
        },
        "KeyName": {
          "Ref": "KongKeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "KongSecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!\/bin\/bash\n",
                "yum update -y aws-cfn-bootstrap\n",
                "echo '* soft nofile 65000' >> \/etc\/security\/limits.conf\n",
                "echo '* hard nofile 65000' >> \/etc\/security\/limits.conf\n",
                "kong_version=",{ "Ref" : "KongVersion" }, "\n",
                "if [ -z $kong_version ]\n",
                "then\n",
                "   wget -O kong.rpm downloadkong.org/aws.rpm\n",
                "else\n",
                "   wget -O kong.rpm downloadkong.org/aws.rpm?version=$kong_version\n",
                "fi\n",
                "if [ -e \".\/kong.rpm\" ]\n",
                "then\n",
                "   echo \"Installing Kong...\" \n",
                "else\n", 
                "   /opt/aws/bin/cfn-signal -e 1 --reason \"Failed to download Kong\" '", { "Ref" : "KongWaitHandle" }, "'\n",
                "   echo \"failed to download kong, exiting...\" \n",
                "   exit\n",
                "fi\n", 
                "yum install -y epel-release\n",
                "yum install -y kong.rpm --nogpgcheck\n",
                "echo \"database: postgres\" >> hosts\n",
                "echo \"postgres:\" >> hosts\n",
                "echo \"   host: \"", { "Fn::If" : [ "CreateRDS", { "Fn::GetAtt" : [ "PostgresDB", "Endpoint.Address" ] }, {"Ref" : "DBHost"}] }, " >> hosts\n",
                "echo \"   port: \"", { "Fn::If" : [ "CreateRDS", { "Fn::GetAtt" : [ "PostgresDB", "Endpoint.Port" ] }, {"Ref" : "DBPort"}] }, " >> hosts\n",
                "echo \"   user: \"", { "Ref" : "DBUsername" }, " >> hosts\n",
                "echo \"   database: \"", { "Ref" : "DBName" }, " >> hosts\n",
                "echo \"   password: \"", { "Ref" : "DBPassword" }, " >> hosts\n",
                "sed -i $'/# postgres:\/{r hosts\\n d}' \/etc\/kong\/kong.yml\n",
                "sleep `echo $(( RANDOM % ( 120 - 30 + 1 ) + 30 ))`\n",
                "COUNTER=0\n",
                "while [ $COUNTER -lt 4 ]; do\n",
                "   /usr/local/bin/kong status\n",
                "   if [[ $? -ne 0 ]]; then\n",
                "      echo \"trying to start kong..\"\n",
                "      su -s \/bin\/sh -c \"\/usr\/local\/bin\/kong start\" ec2-user\n",
                "      let COUNTER=COUNTER+1\n",
                "      sleep `echo $(( RANDOM % ( 120 - 30 + 1 ) + 30 ))`\n",                
                "   else\n",
                "      /opt/aws/bin/cfn-signal -e 0 --reason \"Kong setup completed\" '", { "Ref" : "KongWaitHandle" }, "'\n",
                "      break \n",
                "   fi\n", 
                "done\n",
                "if ! /usr/local/bin/kong status; then\n",
                "   echo \"failed to start kong, exiting...\" \n",
                "   /opt/aws/bin/cfn-signal -e 1 --reason \"Failed to start Kong\" '", { "Ref" : "KongWaitHandle" }, "'\n",
                "fi\n"
              ]
            ]
          }
        }
      }
    },
    "KongLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "AvailabilityZones": {
          "Ref": "KongAvailabilityZones"
        },
        "Listeners": [
          {
            "LoadBalancerPort": "8000",
            "InstancePort": "8000",
            "Protocol": "HTTP"
          },
          {
            "LoadBalancerPort": "8001",
            "InstancePort": "8001",
            "Protocol": "HTTP"
          }
        ],
        "HealthCheck": {
          "Target": "TCP:8000",
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "5",
          "Interval": "30",
          "Timeout": "5"
        }
      }
    },
    "KongSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH access and HTTP access on the inbound port",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "8000",
            "ToPort": "8000",
            "CidrIp": {
              "Ref": "KongProxyAccess"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8001",
            "ToPort": "8001",
            "CidrIp": {
              "Ref": "KongAdminAccess"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          }
        ]
      }
    },
    "Ingress7946": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": {"Ref": "KongSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "7946", "ToPort": "7946", "SourceSecurityGroupId": {
          "Fn::GetAtt" : [ "KongSecurityGroup", "GroupId" ]
        }
      }
    },
    "PostgresDB" : {
	  "Type" : "AWS::RDS::DBInstance",
   	  "Condition" : "CreateRDS",
      "Properties" : {
        "DBSecurityGroups" : [{"Ref" : "DBSecurityGroup"}],
        "Engine" : "postgres",
        "DBName" : { "Ref" : "DBName" },
        "MasterUsername" : { "Ref" : "DBUsername" },
        "DBInstanceClass" : { "Ref" : "DBClass" },
        "DBSecurityGroups" : [ { "Ref" : "DBSecurityGroup" } ],
        "AllocatedStorage" : { "Ref" : "DBAllocatedStorage" },
        "MasterUserPassword" : { "Ref" : "DBPassword" },
        "PubliclyAccessible" : {"Ref": "DBPublicAccess"}
      },
      "DeletionPolicy" : "Snapshot"
    },
    "DBSecurityGroup": {
      "Type": "AWS::RDS::DBSecurityGroup",
      "Condition" : "CreateRDS",
      "Properties": {
        "DBSecurityGroupIngress": { "EC2SecurityGroupName": { "Ref": "KongSecurityGroup" } },
        "GroupDescription"      : "Kong Access"
      }
    }  
  },
  "Outputs": {
    "ProxyURL": {
      "Description": "Kong Proxy URL",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http:\/\/",
            {
              "Fn::GetAtt": [
                "KongLoadBalancer",
                "DNSName"
              ]
            },
            ":8000"
          ]
        ]
      }
    },
    "AdminURL": {
      "Description": "Kong Admin URL",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http:\/\/",
            {
              "Fn::GetAtt": [
                "KongLoadBalancer",
                "DNSName"
              ]
            },
            ":8001"
          ]
        ]
      }
    }
  }
}
